---
import type { Tech } from 'recivi'

import Link from '@/components/Link.astro'
import Icon from '@/components/Icon.astro'
import IconName from '@/components/IconName.astro'
import TimePeriod from '@/components/TimePeriod.astro'
import DateComponent from '@/components/Date.astro'

import type { ColumnSpec, Row } from '@/models/table'

interface Props {
  columns: ColumnSpec[]
  data: Row[]
}
const { columns, data } = Astro.props

const columnIds = columns.map((column) => column.id)

const pathName = new URL(Astro.request.url).pathname
function isCurr(row: Row) {
  return Boolean(row.url) && pathName.includes(row.url ?? '')
}
---

<!-- Padding must be removed because cells are padded individually. -->
<table
  class="cntnr px-0 transition"
  x-data={`{ activeGroup: "" }`}>
  <thead class="border-y bg-surface0">
    <tr>
      {
        columns.map((column: ColumnSpec) => (
          <th
            scope="col"
            class:list={[{ 'w-px whitespace-nowrap': !column.isExpanding }]}>
            {column.name ?? column.id}
          </th>
        ))
      }
    </tr>
  </thead>
  <tbody>
    {
      data.map((row, idx) => (
        <tr
          x-data={JSON.stringify({
            groupId: row.groupId ?? idx,
            categories: 'post' in row.data && row.data.post?.data.categories,
          })}
          x-show="$store.writings.isActiveCategoryOverlap(categories)"
          x-bind:class="{ 'opacity-30': activeGroup && groupId !== activeGroup }"
          class="relative transition after:absolute after:inset-y-0 after:start-0 after:bg-red hover:bg-surface0 [&[data-is-curr]]:bg-surface0 [&[data-is-curr]]:after:w-1"
          class:list={[{ 'border-b': row.isLastSibling }]}
          data-is-curr={isCurr(row)}
          @mouseenter="activeGroup = groupId"
          @mouseleave="activeGroup = ''">
          {Object.entries(row.data)
            .filter(([key]) => columnIds.includes(key as keyof typeof row.data))
            .sort(
              ([a], [b]) =>
                columnIds.indexOf(a as keyof typeof row.data) -
                columnIds.indexOf(b as keyof typeof row.data)
            )
            .map(([key, value], idx) => (
              <td
                class:list={[
                  { 'w-px whitespace-nowrap': !columns[idx]?.isExpanding },
                ]}>
                {key === 'epic' || key === 'org' || key === 'institute' ? (
                  <IconName
                    {...value}
                    url={row.url}
                  />
                ) : key === 'title' ? (
                  row.url ? (
                    <Link url={row.url}>{value}</Link>
                  ) : (
                    value
                  )
                ) : key === 'post' ? (
                  <div class="flex flex-col">
                    {row.url ? (
                      <Link url={row.url}>{value.data.title}</Link>
                    ) : (
                      value.data.title
                    )}
                    <ul class="text-subtle">
                      {value.data.categories.map((category: string) => (
                        <li
                          x-data={JSON.stringify({ category })}
                          x-bind:class="{ 'text-red': $store.writings.activeCategories.includes(category) }"
                          class="inline-block after:mr-1 after:content-['·'] last:after:content-none">
                          {category}
                        </li>
                      ))}
                    </ul>
                  </div>
                ) : key === 'link' ? (
                  value && <Link url={value} />
                ) : key === 'tech' ? (
                  <ul>
                    {value.map((item: Tech) => (
                      <li
                        title={item.name}
                        class="inline-block after:mr-1 after:text-subtle after:content-['·'] last:after:content-none">
                        <Icon name={item.id} />
                      </li>
                    ))}
                  </ul>
                ) : key === 'period' ? (
                  <TimePeriod {...value} />
                ) : key === 'published' ||
                  key === 'updated' ||
                  key === 'issued' ? (
                  <DateComponent date={value} />
                ) : (
                  value
                )}
              </td>
            ))}
        </tr>
      ))
    }
  </tbody>
</table>
