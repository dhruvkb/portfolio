---
import type { Tech } from '@recivi/schema'

import ResumeLayout from '@/layouts/resume.astro'

import IconName from '@/components/IconName.astro'
import Meta from '@/components/Meta.astro'
import Link from '@/components/Link.astro'

import type { Epic } from '@/models/recivi'
import { epics } from '@/stores/recivi'
import { urlToDest } from '@/utils/recivi'

export async function getStaticPaths() {
  return epics.map((epic) => ({
    params: {
      id: epic.id,
    },
    props: {
      epic,
    },
  }))
}

interface Props {
  epic: Epic
}
const { epic } = Astro.props

const metadata = {
  title: `Epic: ${epic.name}`,
  description: `Know about the epic ${epic.name} and my work on it.`,
  banRobots: true,
}
---

<ResumeLayout>
  <slot
    name="head"
    slot="head">
    <Meta data={metadata} />
  </slot>

  <div class="cntnr my-4">
    <h1 class="text-3xl text-peach sm:text-5xl">
      <IconName {...epic} />
    </h1>

    <!-- Org -->
    {
      epic.role?.org && (
        <p>
          <span class="text-overlay1">Org:</span>
          <IconName
            {...epic.role.org}
            url={`/resume/orgs/${epic.role.org.id}`}
          />
        </p>
      )
    }

    {
      epic.description ? (
        <p set:html={epic.description} />
      ) : epic.summary ? (
        <p set:html={epic.summary} />
      ) : undefined
    }

    {
      epic.projects.map((project) => (
        <div>
          <h2>{project.name}</h2>

          <dl class="mb-2 grid grid-cols-[auto_1fr] gap-x-2 [&:not(:has(dt))]:hidden">
            {project.url && (
              <Fragment>
                <dt class="text-overlay1">URL:</dt>
                <dd>
                  <Link url={project.url}>{urlToDest(project.url)}</Link>
                </dd>
              </Fragment>
            )}
            {project.role && (
              <Fragment>
                <dt class="text-overlay1">Role:</dt>
                <dd>{project.role}</dd>
              </Fragment>
            )}
          </dl>

          {project.description ? (
            <p set:html={project.description} />
          ) : project.summary ? (
            <p set:html={project.summary} />
          ) : undefined}

          {project.highlights?.length ? (
            <Fragment>
              <h3>Highlights</h3>
              <ul class="list-disc pl-4 marker:text-peach">
                {project.highlights?.map((hl) => (
                  <li set:html={hl} />
                ))}
              </ul>
            </Fragment>
          ) : undefined}

          {project.technologies?.length && (
            <Fragment>
              <h3>Technologies</h3>
              <ul class="list-disc columns-2 pl-4 marker:text-peach">
                {project.technologies?.map((item: Tech) => (
                  <li>
                    <IconName {...item} />
                  </li>
                ))}
              </ul>
            </Fragment>
          )}
        </div>
      ))
    }
  </div>
</ResumeLayout>
