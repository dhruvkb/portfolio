---
/**
 * layout for résumé index and org/epic pages
 *
 * root
 * └─ main
 *    └─ resume (this)
 *
 * Provides two slots:
 * - `head` for adding metadata to the page header
 * - default slot for the right pane content
 */

import { getEntry } from 'astro:content'

import ScreenLayout from '@/layouts/screen.astro'

import EpicCard from '@/components/EpicCard.astro'
import InstituteCard from '@/components/InstituteCard.astro'
import Meta from '@/components/Meta.astro'
import OrgCard from '@/components/OrgCard.astro'
import Table from '@/components/Table.astro'
import Skill from '@/components/Skill.astro'
import LanguageList from '@/components/LanguageList.astro'

import { Content as ResumeIndex } from '@/pages/resume/_index.mdx'

import {
  roleColumns,
  projectColumns,
  roleData,
  projectData,
  certColumns,
  certData,
} from '@/models/table'
import { institutes, epics, orgs, recivi } from '@/stores/recivi'

// Forward all props to the parent layout `MainLayout`.
const attrs = Astro.props

const id = 'resume'
const metadata = (await getEntry('pages', id))?.data

const hasContent = Astro.slots.has('default')
---

<ScreenLayout {...attrs}>
  <slot
    name="head"
    slot="head">
    <!--
    We render the résumé index metadata by default.
    Subpages can override this using the `head` slot.
    -->
    {metadata && <Meta data={metadata} />}
  </slot>

  <!-- content for the left pane -->
  <main class="cntnr my-4 grow">
    <ResumeIndex />

    {
      Boolean(certData.length) && (
        <Fragment>
          <h2>Education</h2>
          <div class="hidden sm:block">
            <Table
              columns={certColumns}
              data={certData}
            />
          </div>
          <div class="sm:hidden">
            {institutes.map((institute) => (
              <InstituteCard {institute} />
            ))}
          </div>
        </Fragment>
      )
    }

    {
      Boolean(roleData.length) && (
        <Fragment>
          <h2>Roles</h2>
          <p>Click on an org (or epic) name to know more.</p>
          <div class="hidden sm:block">
            <Table
              columns={roleColumns}
              data={roleData}
            />
          </div>
          <div class="sm:hidden">
            {orgs.map((org) => (
              <OrgCard {org} />
            ))}
          </div>
        </Fragment>
      )
    }

    {
      Boolean(projectData.length) && (
        <Fragment>
          <h2>Projects</h2>
          <p>Click on an epic (or org) name to know more.</p>
          <div class="hidden sm:block">
            <Table
              columns={projectColumns}
              data={projectData}
            />
          </div>
          <div class="sm:hidden">
            {epics.map((epic) => (
              <EpicCard {epic} />
            ))}
          </div>
        </Fragment>
      )
    }

    {
      Boolean(recivi.bio.skills?.length) && (
        <Fragment>
          <h2>Skills</h2>
          <p>Apart from what's listed above, I also possess these skills.</p>
          <ul class="group ml-4 list-disc marker:text-peach sm:columns-2">
            {recivi.bio.skills?.map((skill) => (
              <li class="py-0.5 transition group-hover:opacity-30 hover:opacity-100">
                <Skill {skill} />
              </li>
            ))}
          </ul>
        </Fragment>
      )
    }

    {
      Boolean(recivi.bio.languages?.length) && (
        <Fragment>
          <h2>Languages</h2>
          <p>
            Growing up in India, one tends to learn a lot of languages. I am no
            exception. I speak the following languages, with varying levels of
            fluency.
          </p>
          <LanguageList />
        </Fragment>
      )
    }
  </main>

  <!-- content for the right pane -->
  <slot slot={hasContent ? 'secondary' : undefined} />
</ScreenLayout>

<script>
  /** Calculate the percentage of life spent producing software. */

  import { site } from '@/stores/site'

  function highlightEl(percentEl: HTMLElement) {
    percentEl.style.borderBottomWidth = '1px'
    percentEl.style.cursor = 'help'
  }

  const age = new Date().getFullYear() - site.birthYear

  const hobbyYears = age - site.hobbyAge
  /** hobby years as a percent of age */
  const hobbyPercent = Math.ceil((hobbyYears / age) * 100)
  const prodPercentEl = document.getElementById('hobby-percent')
  if (prodPercentEl) {
    prodPercentEl.innerText = `~${hobbyPercent}%`
    prodPercentEl.title = `~${hobbyYears} years`
    highlightEl(prodPercentEl)
  }

  const jobYears = age - site.jobAge
  /** job years as a percent of hobby years */
  const jobPercent = Math.ceil((jobYears / hobbyYears) * 100)
  const jobPercentEl = document.getElementById('job-percent')
  if (jobPercentEl) {
    jobPercentEl.innerText = `~${jobPercent}%`
    jobPercentEl.title = `~${jobYears} years`
    highlightEl(jobPercentEl)
  }
</script>
